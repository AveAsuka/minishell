Минишелл
Такая же красивая, как раковина
Резюме:
Этот проект посвящен созданию простой оболочки.
Да, твоя собственная маленькая вечеринка.
Вы узнаете много нового о процессах и файловых дескрипторах.
Версия: 6

===

Глава I
Введение

Существование раковин связано с самим его существованием.

В то время все разработчики согласились с тем, что общение с компьютером 
с использованием выровненных переключателей 1/0 серьезно раздражало.

Вполне логично, что им пришла в голову идея создания программного обеспечения 
для общения с компьютером с помощью интерактивных строк команд на языке, 
несколько близком к человеческому языку.

Благодаря Minishell вы сможете путешествовать во времени и возвращаться к проблемам, 
с которыми сталкивались люди, когда Windows еще не существовала.

===

Глава III
Обязательная часть

Ваша оболочка должна:
• Отображение подсказки при ожидании новой команды.
• Иметь историю работы.
• Поиск и запуск нужного исполняемого файла (на основе переменной PATH или с использованием
относительного или абсолютного пути).
• Не используйте более одной глобальной переменной. Подумайте об этом. 
Вам придется объяснить его назначение.
• Не интерпретируйте открытые кавычки или специальные символы, которые не требуются для темы, 
такие как \ (обратная косая черта) или ; (точка с запятой).
• Дескриптор ’ (одинарная кавычка), который должен помешать оболочке интерпретировать метасимволы 
в последовательности, заключенной в кавычки.
• Дескриптор " (двойная кавычка), который должен помешать оболочке интерпретировать метасимволы 
в последовательности, заключенной в кавычки, за исключением $ (знак доллара).

• Осуществлять перенаправления:
◦ < следует перенаправить ввод.
◦ > следует перенаправить вывод.
◦ << должен быть указан разделитель, затем считывайте входные данные до тех пор, пока не появится 
строка, содержащая разделитель. Тем не менее, он не должен обновлять историю!
◦ >> следует перенаправить вывод в режиме добавления.
• Реализовать каналы (| символ). Выходные данные каждой команды в конвейере
подключаются к входу следующей команды через канал.
• Обрабатывайте переменные среды ($, за которыми следует последовательность символов), которые
должны расширяться до их значений.
• Обрабатывать $? который должен расшириться до статуса выхода самого последнего выполненного
конвейера переднего плана.
• Обработайте ctrl-C, ctrl-D и ctrl-\, которые должны вести себя как в bash.
• В интерактивном режиме:
◦ ctrl-C отображает новое приглашение в новой строке.
◦ ctrl-D завершает работу оболочки.
◦ ctrl-\ ничего не делает.

• Ваша оболочка должна реализовывать следующие встроенные функции [BUILTIN]:
◦ 1) echo с опцией -n;
◦ 2) cd только с относительным или абсолютным путем;
◦ 3) pwd без каких-либо опций;
◦ 4) export без каких-либо опций;
◦ 5) unset (сбросить настройки) без каких-либо опций;
◦ 6) env без параметров или аргументов; [env with no options or arguments] [сложно, непонятно]
◦ 7) exit без каких-либо вариантов;

Функция readline() может привести к утечке памяти. Вам не нужно их чинить. 
Но это не означает, что ваш собственный код, да, код, который вы написали, может иметь утечки памяти.

Вы должны ограничиться описанием предмета. Все, о чем не просят, не требуется.
Если у вас есть какие-либо сомнения по поводу какого-либо требования, возьмите bash в качестве ссылки.

===

Глава IV
Бонусная часть

Ваша программа должна реализовать:
• && и || с указанием приоритетов в круглых скобках.
• Подстановочные знаки * должны работать для текущего рабочего каталога.

Бонусная часть будет начислена только в том случае, если обязательная часть
идеальный. Идеальный означает, что обязательная часть была выполнена полностью и работает без сбоев. 
Если вы не выполнили ВСЕ обязательные требования, ваша бонусная часть вообще не будет оцениваться.